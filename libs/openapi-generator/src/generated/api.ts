/* tslint:disable */
/* eslint-disable */
/**
 * English
 * English API documents
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Configuration } from './configuration';
import globalAxios, {
  AxiosPromise,
  AxiosInstance,
  AxiosRequestConfig,
} from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from './common';
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from './base';

/**
 *
 * @export
 * @interface ApiError
 */
export interface ApiError {
  /**
   *
   * @type {object}
   * @memberof ApiError
   */
  error?: object | null;
  /**
   *
   * @type {string}
   * @memberof ApiError
   */
  traceId: string;
  /**
   *
   * @type {number}
   * @memberof ApiError
   */
  code: number;
  /**
   *
   * @type {string}
   * @memberof ApiError
   */
  message: string;
  /**
   *
   * @type {Array<ValidationExceptionResponse>}
   * @memberof ApiError
   */
  validationErrors: Array<ValidationExceptionResponse>;
  /**
   *
   * @type {string}
   * @memberof ApiError
   */
  timestamp: string;
}
/**
 *
 * @export
 * @interface AppApiErrorResponse
 */
export interface AppApiErrorResponse {
  /**
   *
   * @type {ApiError}
   * @memberof AppApiErrorResponse
   */
  error: ApiError;
  /**
   *
   * @type {string}
   * @memberof AppApiErrorResponse
   */
  message: string;
}
/**
 *
 * @export
 * @interface AppApiPaginatedResponse
 */
export interface AppApiPaginatedResponse {
  /**
   *
   * @type {Array<string>}
   * @memberof AppApiPaginatedResponse
   */
  data: Array<string>;
  /**
   *
   * @type {Pagination}
   * @memberof AppApiPaginatedResponse
   */
  pagination: Pagination;
  /**
   *
   * @type {string}
   * @memberof AppApiPaginatedResponse
   */
  message: string;
}
/**
 *
 * @export
 * @interface AppApiSuccessResponse
 */
export interface AppApiSuccessResponse {
  /**
   *
   * @type {string}
   * @memberof AppApiSuccessResponse
   */
  message: string;
}
/**
 *
 * @export
 * @interface AuthMe200Response
 */
export interface AuthMe200Response {
  /**
   *
   * @type {string}
   * @memberof AuthMe200Response
   */
  message: string;
  /**
   *
   * @type {UserResponse}
   * @memberof AuthMe200Response
   */
  data: UserResponse;
}
/**
 *
 * @export
 * @interface AuthMe200ResponseAllOf
 */
export interface AuthMe200ResponseAllOf {
  /**
   *
   * @type {UserResponse}
   * @memberof AuthMe200ResponseAllOf
   */
  data?: UserResponse;
}
/**
 *
 * @export
 * @interface CategoryList200Response
 */
export interface CategoryList200Response {
  /**
   *
   * @type {Array<CategoryResponse>}
   * @memberof CategoryList200Response
   */
  data: Array<CategoryResponse>;
  /**
   *
   * @type {Pagination}
   * @memberof CategoryList200Response
   */
  pagination: Pagination;
  /**
   *
   * @type {string}
   * @memberof CategoryList200Response
   */
  message: string;
}
/**
 *
 * @export
 * @interface CategoryList200ResponseAllOf
 */
export interface CategoryList200ResponseAllOf {
  /**
   *
   * @type {Array<CategoryResponse>}
   * @memberof CategoryList200ResponseAllOf
   */
  data?: Array<CategoryResponse>;
}
/**
 *
 * @export
 * @interface CategoryResponse
 */
export interface CategoryResponse {
  /**
   *
   * @type {string}
   * @memberof CategoryResponse
   */
  created_at: string;
  /**
   *
   * @type {string}
   * @memberof CategoryResponse
   */
  updated_at: string;
  /**
   *
   * @type {UserBasicResponseCreator}
   * @memberof CategoryResponse
   */
  creator: UserBasicResponseCreator | null;
  /**
   *
   * @type {UserBasicResponseCreator}
   * @memberof CategoryResponse
   */
  updater: UserBasicResponseCreator | null;
  /**
   *
   * @type {string}
   * @memberof CategoryResponse
   */
  __typename?: CategoryResponseTypenameEnum;
  /**
   *
   * @type {number}
   * @memberof CategoryResponse
   */
  id: number;
  /**
   *
   * @type {string}
   * @memberof CategoryResponse
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof CategoryResponse
   */
  slug: string;
}

export const CategoryResponseTypenameEnum = {
  All: 'all',
  Users: 'users',
  Roles: 'roles',
  StoredFiles: 'stored_files',
  Categories: 'categories',
  Topics: 'topics',
  Courses: 'courses',
  Sections: 'sections',
  Lessons: 'lessons',
  CourseSubscribes: 'course_subscribes',
} as const;

export type CategoryResponseTypenameEnum =
  (typeof CategoryResponseTypenameEnum)[keyof typeof CategoryResponseTypenameEnum];

/**
 *
 * @export
 * @interface CourseCreate200Response
 */
export interface CourseCreate200Response {
  /**
   *
   * @type {string}
   * @memberof CourseCreate200Response
   */
  message: string;
  /**
   *
   * @type {CourseResponse}
   * @memberof CourseCreate200Response
   */
  data: CourseResponse;
}
/**
 *
 * @export
 * @interface CourseCreate200ResponseAllOf
 */
export interface CourseCreate200ResponseAllOf {
  /**
   *
   * @type {CourseResponse}
   * @memberof CourseCreate200ResponseAllOf
   */
  data?: CourseResponse;
}
/**
 *
 * @export
 * @interface CourseDelete200Response
 */
export interface CourseDelete200Response {
  /**
   *
   * @type {string}
   * @memberof CourseDelete200Response
   */
  message: string;
  /**
   *
   * @type {DeleteResponse}
   * @memberof CourseDelete200Response
   */
  data: DeleteResponse;
}
/**
 *
 * @export
 * @interface CourseDelete200ResponseAllOf
 */
export interface CourseDelete200ResponseAllOf {
  /**
   *
   * @type {DeleteResponse}
   * @memberof CourseDelete200ResponseAllOf
   */
  data?: DeleteResponse;
}
/**
 *
 * @export
 * @interface CourseDetailResponse
 */
export interface CourseDetailResponse {
  /**
   *
   * @type {string}
   * @memberof CourseDetailResponse
   */
  created_at: string;
  /**
   *
   * @type {string}
   * @memberof CourseDetailResponse
   */
  updated_at: string;
  /**
   *
   * @type {UserBasicResponseCreator}
   * @memberof CourseDetailResponse
   */
  creator: UserBasicResponseCreator | null;
  /**
   *
   * @type {UserBasicResponseCreator}
   * @memberof CourseDetailResponse
   */
  updater: UserBasicResponseCreator | null;
  /**
   *
   * @type {string}
   * @memberof CourseDetailResponse
   */
  __typename?: CourseDetailResponseTypenameEnum;
  /**
   *
   * @type {number}
   * @memberof CourseDetailResponse
   */
  id: number;
  /**
   *
   * @type {string}
   * @memberof CourseDetailResponse
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof CourseDetailResponse
   */
  slug: string;
  /**
   *
   * @type {string}
   * @memberof CourseDetailResponse
   */
  description: string;
  /**
   *
   * @type {number}
   * @memberof CourseDetailResponse
   */
  status: number;
  /**
   *
   * @type {StoredFileResponse}
   * @memberof CourseDetailResponse
   */
  cover: StoredFileResponse;
  /**
   *
   * @type {UserResponse}
   * @memberof CourseDetailResponse
   */
  administrator: UserResponse;
  /**
   *
   * @type {Array<SectionFullResponse>}
   * @memberof CourseDetailResponse
   */
  sections: Array<SectionFullResponse> | null;
  /**
   *
   * @type {Array<TopicResponse>}
   * @memberof CourseDetailResponse
   */
  topics: Array<TopicResponse> | null;
}

export const CourseDetailResponseTypenameEnum = {
  All: 'all',
  Users: 'users',
  Roles: 'roles',
  StoredFiles: 'stored_files',
  Categories: 'categories',
  Topics: 'topics',
  Courses: 'courses',
  Sections: 'sections',
  Lessons: 'lessons',
  CourseSubscribes: 'course_subscribes',
} as const;

export type CourseDetailResponseTypenameEnum =
  (typeof CourseDetailResponseTypenameEnum)[keyof typeof CourseDetailResponseTypenameEnum];

/**
 *
 * @export
 * @interface CourseFindOne200Response
 */
export interface CourseFindOne200Response {
  /**
   *
   * @type {string}
   * @memberof CourseFindOne200Response
   */
  message: string;
  /**
   *
   * @type {CourseDetailResponse}
   * @memberof CourseFindOne200Response
   */
  data: CourseDetailResponse;
}
/**
 *
 * @export
 * @interface CourseFindOne200ResponseAllOf
 */
export interface CourseFindOne200ResponseAllOf {
  /**
   *
   * @type {CourseDetailResponse}
   * @memberof CourseFindOne200ResponseAllOf
   */
  data?: CourseDetailResponse;
}
/**
 *
 * @export
 * @interface CourseList200Response
 */
export interface CourseList200Response {
  /**
   *
   * @type {Array<CourseResponse>}
   * @memberof CourseList200Response
   */
  data: Array<CourseResponse>;
  /**
   *
   * @type {Pagination}
   * @memberof CourseList200Response
   */
  pagination: Pagination;
  /**
   *
   * @type {string}
   * @memberof CourseList200Response
   */
  message: string;
}
/**
 *
 * @export
 * @interface CourseList200ResponseAllOf
 */
export interface CourseList200ResponseAllOf {
  /**
   *
   * @type {Array<CourseResponse>}
   * @memberof CourseList200ResponseAllOf
   */
  data?: Array<CourseResponse>;
}
/**
 *
 * @export
 * @interface CourseResponse
 */
export interface CourseResponse {
  /**
   *
   * @type {string}
   * @memberof CourseResponse
   */
  created_at: string;
  /**
   *
   * @type {string}
   * @memberof CourseResponse
   */
  updated_at: string;
  /**
   *
   * @type {UserBasicResponseCreator}
   * @memberof CourseResponse
   */
  creator: UserBasicResponseCreator | null;
  /**
   *
   * @type {UserBasicResponseCreator}
   * @memberof CourseResponse
   */
  updater: UserBasicResponseCreator | null;
  /**
   *
   * @type {string}
   * @memberof CourseResponse
   */
  __typename?: CourseResponseTypenameEnum;
  /**
   *
   * @type {number}
   * @memberof CourseResponse
   */
  id: number;
  /**
   *
   * @type {string}
   * @memberof CourseResponse
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof CourseResponse
   */
  slug: string;
  /**
   *
   * @type {string}
   * @memberof CourseResponse
   */
  description: string;
  /**
   *
   * @type {number}
   * @memberof CourseResponse
   */
  status: number;
  /**
   *
   * @type {StoredFileResponse}
   * @memberof CourseResponse
   */
  cover: StoredFileResponse;
  /**
   *
   * @type {UserResponse}
   * @memberof CourseResponse
   */
  administrator: UserResponse;
}

export const CourseResponseTypenameEnum = {
  All: 'all',
  Users: 'users',
  Roles: 'roles',
  StoredFiles: 'stored_files',
  Categories: 'categories',
  Topics: 'topics',
  Courses: 'courses',
  Sections: 'sections',
  Lessons: 'lessons',
  CourseSubscribes: 'course_subscribes',
} as const;

export type CourseResponseTypenameEnum =
  (typeof CourseResponseTypenameEnum)[keyof typeof CourseResponseTypenameEnum];

/**
 *
 * @export
 * @interface CreateLessonDto
 */
export interface CreateLessonDto {
  /**
   *
   * @type {number}
   * @memberof CreateLessonDto
   */
  section_id: number;
  /**
   *
   * @type {string}
   * @memberof CreateLessonDto
   */
  title: string;
  /**
   *
   * @type {string}
   * @memberof CreateLessonDto
   */
  description: string;
  /**
   *
   * @type {string}
   * @memberof CreateLessonDto
   */
  link: string;
  /**
   *
   * @type {number}
   * @memberof CreateLessonDto
   */
  time: number;
}
/**
 *
 * @export
 * @interface CreateSectionDto
 */
export interface CreateSectionDto {
  /**
   *
   * @type {number}
   * @memberof CreateSectionDto
   */
  course_id: number;
  /**
   *
   * @type {string}
   * @memberof CreateSectionDto
   */
  title: string;
  /**
   *
   * @type {string}
   * @memberof CreateSectionDto
   */
  description: string;
}
/**
 *
 * @export
 * @interface DeleteResponse
 */
export interface DeleteResponse {
  /**
   *
   * @type {number}
   * @memberof DeleteResponse
   */
  id: number;
}
/**
 *
 * @export
 * @interface GoogleLogin200Response
 */
export interface GoogleLogin200Response {
  /**
   *
   * @type {string}
   * @memberof GoogleLogin200Response
   */
  message: string;
  /**
   *
   * @type {GoogleLoginResponse}
   * @memberof GoogleLogin200Response
   */
  data: GoogleLoginResponse;
}
/**
 *
 * @export
 * @interface GoogleLogin200ResponseAllOf
 */
export interface GoogleLogin200ResponseAllOf {
  /**
   *
   * @type {GoogleLoginResponse}
   * @memberof GoogleLogin200ResponseAllOf
   */
  data?: GoogleLoginResponse;
}
/**
 *
 * @export
 * @interface GoogleLoginDto
 */
export interface GoogleLoginDto {
  /**
   *
   * @type {string}
   * @memberof GoogleLoginDto
   */
  credential: string;
}
/**
 *
 * @export
 * @interface GoogleLoginResponse
 */
export interface GoogleLoginResponse {
  /**
   *
   * @type {string}
   * @memberof GoogleLoginResponse
   */
  token: string;
}
/**
 *
 * @export
 * @interface LessonResponse
 */
export interface LessonResponse {
  /**
   *
   * @type {string}
   * @memberof LessonResponse
   */
  created_at: string;
  /**
   *
   * @type {string}
   * @memberof LessonResponse
   */
  updated_at: string;
  /**
   *
   * @type {UserBasicResponseCreator}
   * @memberof LessonResponse
   */
  creator: UserBasicResponseCreator | null;
  /**
   *
   * @type {UserBasicResponseCreator}
   * @memberof LessonResponse
   */
  updater: UserBasicResponseCreator | null;
  /**
   *
   * @type {string}
   * @memberof LessonResponse
   */
  __typename?: LessonResponseTypenameEnum;
  /**
   *
   * @type {number}
   * @memberof LessonResponse
   */
  id: number;
  /**
   *
   * @type {string}
   * @memberof LessonResponse
   */
  title: string;
  /**
   *
   * @type {string}
   * @memberof LessonResponse
   */
  description: string;
  /**
   *
   * @type {string}
   * @memberof LessonResponse
   */
  link: string;
  /**
   *
   * @type {number}
   * @memberof LessonResponse
   */
  time: number;
  /**
   *
   * @type {number}
   * @memberof LessonResponse
   */
  section_id: number;
}

export const LessonResponseTypenameEnum = {
  All: 'all',
  Users: 'users',
  Roles: 'roles',
  StoredFiles: 'stored_files',
  Categories: 'categories',
  Topics: 'topics',
  Courses: 'courses',
  Sections: 'sections',
  Lessons: 'lessons',
  CourseSubscribes: 'course_subscribes',
} as const;

export type LessonResponseTypenameEnum =
  (typeof LessonResponseTypenameEnum)[keyof typeof LessonResponseTypenameEnum];

/**
 *
 * @export
 * @interface Pagination
 */
export interface Pagination {
  /**
   *
   * @type {number}
   * @memberof Pagination
   */
  total: number;
  /**
   *
   * @type {number}
   * @memberof Pagination
   */
  page: number;
  /**
   *
   * @type {number}
   * @memberof Pagination
   */
  limit: number;
  /**
   *
   * @type {number}
   * @memberof Pagination
   */
  lastPage: number;
}
/**
 *
 * @export
 * @interface RoleResponse
 */
export interface RoleResponse {
  /**
   *
   * @type {string}
   * @memberof RoleResponse
   */
  created_at: string;
  /**
   *
   * @type {string}
   * @memberof RoleResponse
   */
  updated_at: string;
  /**
   *
   * @type {UserBasicResponseCreator}
   * @memberof RoleResponse
   */
  creator: UserBasicResponseCreator | null;
  /**
   *
   * @type {UserBasicResponseCreator}
   * @memberof RoleResponse
   */
  updater: UserBasicResponseCreator | null;
  /**
   *
   * @type {string}
   * @memberof RoleResponse
   */
  __typename?: RoleResponseTypenameEnum;
  /**
   *
   * @type {number}
   * @memberof RoleResponse
   */
  id: number;
  /**
   *
   * @type {string}
   * @memberof RoleResponse
   */
  name: string;
  /**
   *
   * @type {number}
   * @memberof RoleResponse
   */
  type: RoleResponseTypeEnum;
}

export const RoleResponseTypenameEnum = {
  All: 'all',
  Users: 'users',
  Roles: 'roles',
  StoredFiles: 'stored_files',
  Categories: 'categories',
  Topics: 'topics',
  Courses: 'courses',
  Sections: 'sections',
  Lessons: 'lessons',
  CourseSubscribes: 'course_subscribes',
} as const;

export type RoleResponseTypenameEnum =
  (typeof RoleResponseTypenameEnum)[keyof typeof RoleResponseTypenameEnum];
export const RoleResponseTypeEnum = {
  NUMBER_1: 1,
  NUMBER_2: 2,
} as const;

export type RoleResponseTypeEnum =
  (typeof RoleResponseTypeEnum)[keyof typeof RoleResponseTypeEnum];

/**
 *
 * @export
 * @interface SectionCreate200Response
 */
export interface SectionCreate200Response {
  /**
   *
   * @type {string}
   * @memberof SectionCreate200Response
   */
  message: string;
  /**
   *
   * @type {LessonResponse}
   * @memberof SectionCreate200Response
   */
  data: LessonResponse;
}
/**
 *
 * @export
 * @interface SectionCreate200ResponseAllOf
 */
export interface SectionCreate200ResponseAllOf {
  /**
   *
   * @type {LessonResponse}
   * @memberof SectionCreate200ResponseAllOf
   */
  data?: LessonResponse;
}
/**
 *
 * @export
 * @interface SectionFullResponse
 */
export interface SectionFullResponse {
  /**
   *
   * @type {string}
   * @memberof SectionFullResponse
   */
  created_at: string;
  /**
   *
   * @type {string}
   * @memberof SectionFullResponse
   */
  updated_at: string;
  /**
   *
   * @type {UserBasicResponseCreator}
   * @memberof SectionFullResponse
   */
  creator: UserBasicResponseCreator | null;
  /**
   *
   * @type {UserBasicResponseCreator}
   * @memberof SectionFullResponse
   */
  updater: UserBasicResponseCreator | null;
  /**
   *
   * @type {string}
   * @memberof SectionFullResponse
   */
  __typename?: SectionFullResponseTypenameEnum;
  /**
   *
   * @type {number}
   * @memberof SectionFullResponse
   */
  id: number;
  /**
   *
   * @type {string}
   * @memberof SectionFullResponse
   */
  title: string;
  /**
   *
   * @type {string}
   * @memberof SectionFullResponse
   */
  description: string;
  /**
   *
   * @type {number}
   * @memberof SectionFullResponse
   */
  course_id: number;
  /**
   *
   * @type {Array<LessonResponse>}
   * @memberof SectionFullResponse
   */
  lessons: Array<LessonResponse> | null;
}

export const SectionFullResponseTypenameEnum = {
  All: 'all',
  Users: 'users',
  Roles: 'roles',
  StoredFiles: 'stored_files',
  Categories: 'categories',
  Topics: 'topics',
  Courses: 'courses',
  Sections: 'sections',
  Lessons: 'lessons',
  CourseSubscribes: 'course_subscribes',
} as const;

export type SectionFullResponseTypenameEnum =
  (typeof SectionFullResponseTypenameEnum)[keyof typeof SectionFullResponseTypenameEnum];

/**
 *
 * @export
 * @interface StoredFileResponse
 */
export interface StoredFileResponse {
  /**
   *
   * @type {string}
   * @memberof StoredFileResponse
   */
  created_at: string;
  /**
   *
   * @type {string}
   * @memberof StoredFileResponse
   */
  updated_at: string;
  /**
   *
   * @type {UserBasicResponseCreator}
   * @memberof StoredFileResponse
   */
  creator: UserBasicResponseCreator | null;
  /**
   *
   * @type {UserBasicResponseCreator}
   * @memberof StoredFileResponse
   */
  updater: UserBasicResponseCreator | null;
  /**
   *
   * @type {string}
   * @memberof StoredFileResponse
   */
  __typename?: StoredFileResponseTypenameEnum;
  /**
   *
   * @type {string}
   * @memberof StoredFileResponse
   */
  id: string;
  /**
   *
   * @type {string}
   * @memberof StoredFileResponse
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof StoredFileResponse
   */
  hash: string;
  /**
   *
   * @type {string}
   * @memberof StoredFileResponse
   */
  key: string;
  /**
   *
   * @type {string}
   * @memberof StoredFileResponse
   */
  path: string;
}

export const StoredFileResponseTypenameEnum = {
  All: 'all',
  Users: 'users',
  Roles: 'roles',
  StoredFiles: 'stored_files',
  Categories: 'categories',
  Topics: 'topics',
  Courses: 'courses',
  Sections: 'sections',
  Lessons: 'lessons',
  CourseSubscribes: 'course_subscribes',
} as const;

export type StoredFileResponseTypenameEnum =
  (typeof StoredFileResponseTypenameEnum)[keyof typeof StoredFileResponseTypenameEnum];

/**
 *
 * @export
 * @interface TopicFindAll200Response
 */
export interface TopicFindAll200Response {
  /**
   *
   * @type {Array<TopicStatResponse>}
   * @memberof TopicFindAll200Response
   */
  data: Array<TopicStatResponse>;
  /**
   *
   * @type {Pagination}
   * @memberof TopicFindAll200Response
   */
  pagination: Pagination;
  /**
   *
   * @type {string}
   * @memberof TopicFindAll200Response
   */
  message: string;
}
/**
 *
 * @export
 * @interface TopicFindAll200ResponseAllOf
 */
export interface TopicFindAll200ResponseAllOf {
  /**
   *
   * @type {Array<TopicStatResponse>}
   * @memberof TopicFindAll200ResponseAllOf
   */
  data?: Array<TopicStatResponse>;
}
/**
 *
 * @export
 * @interface TopicFindOne200Response
 */
export interface TopicFindOne200Response {
  /**
   *
   * @type {string}
   * @memberof TopicFindOne200Response
   */
  message: string;
  /**
   *
   * @type {TopicFullResponse}
   * @memberof TopicFindOne200Response
   */
  data: TopicFullResponse;
}
/**
 *
 * @export
 * @interface TopicFindOne200ResponseAllOf
 */
export interface TopicFindOne200ResponseAllOf {
  /**
   *
   * @type {TopicFullResponse}
   * @memberof TopicFindOne200ResponseAllOf
   */
  data?: TopicFullResponse;
}
/**
 *
 * @export
 * @interface TopicFullResponse
 */
export interface TopicFullResponse {
  /**
   *
   * @type {string}
   * @memberof TopicFullResponse
   */
  created_at: string;
  /**
   *
   * @type {string}
   * @memberof TopicFullResponse
   */
  updated_at: string;
  /**
   *
   * @type {UserBasicResponseCreator}
   * @memberof TopicFullResponse
   */
  creator: UserBasicResponseCreator | null;
  /**
   *
   * @type {UserBasicResponseCreator}
   * @memberof TopicFullResponse
   */
  updater: UserBasicResponseCreator | null;
  /**
   *
   * @type {string}
   * @memberof TopicFullResponse
   */
  __typename?: TopicFullResponseTypenameEnum;
  /**
   *
   * @type {number}
   * @memberof TopicFullResponse
   */
  id: number;
  /**
   *
   * @type {string}
   * @memberof TopicFullResponse
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof TopicFullResponse
   */
  slug: string;
  /**
   *
   * @type {string}
   * @memberof TopicFullResponse
   */
  cover_id: string;
  /**
   *
   * @type {TopicStatResponseCover}
   * @memberof TopicFullResponse
   */
  cover: TopicStatResponseCover | null;
  /**
   *
   * @type {Array<CategoryResponse>}
   * @memberof TopicFullResponse
   */
  categories: Array<CategoryResponse>;
  /**
   *
   * @type {Array<CourseResponse>}
   * @memberof TopicFullResponse
   */
  courses: Array<CourseResponse>;
}

export const TopicFullResponseTypenameEnum = {
  All: 'all',
  Users: 'users',
  Roles: 'roles',
  StoredFiles: 'stored_files',
  Categories: 'categories',
  Topics: 'topics',
  Courses: 'courses',
  Sections: 'sections',
  Lessons: 'lessons',
  CourseSubscribes: 'course_subscribes',
} as const;

export type TopicFullResponseTypenameEnum =
  (typeof TopicFullResponseTypenameEnum)[keyof typeof TopicFullResponseTypenameEnum];

/**
 *
 * @export
 * @interface TopicResponse
 */
export interface TopicResponse {
  /**
   *
   * @type {string}
   * @memberof TopicResponse
   */
  created_at: string;
  /**
   *
   * @type {string}
   * @memberof TopicResponse
   */
  updated_at: string;
  /**
   *
   * @type {UserBasicResponseCreator}
   * @memberof TopicResponse
   */
  creator: UserBasicResponseCreator | null;
  /**
   *
   * @type {UserBasicResponseCreator}
   * @memberof TopicResponse
   */
  updater: UserBasicResponseCreator | null;
  /**
   *
   * @type {string}
   * @memberof TopicResponse
   */
  __typename?: TopicResponseTypenameEnum;
  /**
   *
   * @type {number}
   * @memberof TopicResponse
   */
  id: number;
  /**
   *
   * @type {string}
   * @memberof TopicResponse
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof TopicResponse
   */
  slug: string;
  /**
   *
   * @type {string}
   * @memberof TopicResponse
   */
  cover_id: string;
  /**
   *
   * @type {TopicStatResponseCover}
   * @memberof TopicResponse
   */
  cover: TopicStatResponseCover | null;
}

export const TopicResponseTypenameEnum = {
  All: 'all',
  Users: 'users',
  Roles: 'roles',
  StoredFiles: 'stored_files',
  Categories: 'categories',
  Topics: 'topics',
  Courses: 'courses',
  Sections: 'sections',
  Lessons: 'lessons',
  CourseSubscribes: 'course_subscribes',
} as const;

export type TopicResponseTypenameEnum =
  (typeof TopicResponseTypenameEnum)[keyof typeof TopicResponseTypenameEnum];

/**
 *
 * @export
 * @interface TopicStatResponse
 */
export interface TopicStatResponse {
  /**
   *
   * @type {string}
   * @memberof TopicStatResponse
   */
  created_at: string;
  /**
   *
   * @type {string}
   * @memberof TopicStatResponse
   */
  updated_at: string;
  /**
   *
   * @type {UserBasicResponseCreator}
   * @memberof TopicStatResponse
   */
  creator: UserBasicResponseCreator | null;
  /**
   *
   * @type {UserBasicResponseCreator}
   * @memberof TopicStatResponse
   */
  updater: UserBasicResponseCreator | null;
  /**
   *
   * @type {string}
   * @memberof TopicStatResponse
   */
  __typename?: TopicStatResponseTypenameEnum;
  /**
   *
   * @type {number}
   * @memberof TopicStatResponse
   */
  id: number;
  /**
   *
   * @type {string}
   * @memberof TopicStatResponse
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof TopicStatResponse
   */
  slug: string;
  /**
   *
   * @type {string}
   * @memberof TopicStatResponse
   */
  cover_id: string;
  /**
   *
   * @type {TopicStatResponseCover}
   * @memberof TopicStatResponse
   */
  cover: TopicStatResponseCover | null;
  /**
   *
   * @type {number}
   * @memberof TopicStatResponse
   */
  totalCourses: number;
  /**
   *
   * @type {number}
   * @memberof TopicStatResponse
   */
  totalVideos: number;
}

export const TopicStatResponseTypenameEnum = {
  All: 'all',
  Users: 'users',
  Roles: 'roles',
  StoredFiles: 'stored_files',
  Categories: 'categories',
  Topics: 'topics',
  Courses: 'courses',
  Sections: 'sections',
  Lessons: 'lessons',
  CourseSubscribes: 'course_subscribes',
} as const;

export type TopicStatResponseTypenameEnum =
  (typeof TopicStatResponseTypenameEnum)[keyof typeof TopicStatResponseTypenameEnum];

/**
 *
 * @export
 * @interface TopicStatResponseCover
 */
export interface TopicStatResponseCover {
  /**
   *
   * @type {string}
   * @memberof TopicStatResponseCover
   */
  created_at: string;
  /**
   *
   * @type {string}
   * @memberof TopicStatResponseCover
   */
  updated_at: string;
  /**
   *
   * @type {UserBasicResponseCreator}
   * @memberof TopicStatResponseCover
   */
  creator: UserBasicResponseCreator | null;
  /**
   *
   * @type {UserBasicResponseCreator}
   * @memberof TopicStatResponseCover
   */
  updater: UserBasicResponseCreator | null;
  /**
   *
   * @type {string}
   * @memberof TopicStatResponseCover
   */
  __typename?: TopicStatResponseCoverTypenameEnum;
  /**
   *
   * @type {string}
   * @memberof TopicStatResponseCover
   */
  id: string;
  /**
   *
   * @type {string}
   * @memberof TopicStatResponseCover
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof TopicStatResponseCover
   */
  hash: string;
  /**
   *
   * @type {string}
   * @memberof TopicStatResponseCover
   */
  key: string;
  /**
   *
   * @type {string}
   * @memberof TopicStatResponseCover
   */
  path: string;
}

export const TopicStatResponseCoverTypenameEnum = {
  All: 'all',
  Users: 'users',
  Roles: 'roles',
  StoredFiles: 'stored_files',
  Categories: 'categories',
  Topics: 'topics',
  Courses: 'courses',
  Sections: 'sections',
  Lessons: 'lessons',
  CourseSubscribes: 'course_subscribes',
} as const;

export type TopicStatResponseCoverTypenameEnum =
  (typeof TopicStatResponseCoverTypenameEnum)[keyof typeof TopicStatResponseCoverTypenameEnum];

/**
 *
 * @export
 * @interface UserBasicResponse
 */
export interface UserBasicResponse {
  /**
   *
   * @type {number}
   * @memberof UserBasicResponse
   */
  id: number;
  /**
   *
   * @type {string}
   * @memberof UserBasicResponse
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof UserBasicResponse
   */
  email: string;
  /**
   *
   * @type {string}
   * @memberof UserBasicResponse
   */
  google_id: string | null;
  /**
   *
   * @type {number}
   * @memberof UserBasicResponse
   */
  role_id: number;
  /**
   *
   * @type {string}
   * @memberof UserBasicResponse
   */
  avatar_id: string | null;
  /**
   *
   * @type {string}
   * @memberof UserBasicResponse
   */
  created_at: string;
  /**
   *
   * @type {string}
   * @memberof UserBasicResponse
   */
  updated_at: string;
  /**
   *
   * @type {UserBasicResponseCreator}
   * @memberof UserBasicResponse
   */
  creator: UserBasicResponseCreator | null;
  /**
   *
   * @type {UserBasicResponseCreator}
   * @memberof UserBasicResponse
   */
  updater: UserBasicResponseCreator | null;
  /**
   *
   * @type {string}
   * @memberof UserBasicResponse
   */
  __typename?: UserBasicResponseTypenameEnum;
}

export const UserBasicResponseTypenameEnum = {
  All: 'all',
  Users: 'users',
  Roles: 'roles',
  StoredFiles: 'stored_files',
  Categories: 'categories',
  Topics: 'topics',
  Courses: 'courses',
  Sections: 'sections',
  Lessons: 'lessons',
  CourseSubscribes: 'course_subscribes',
} as const;

export type UserBasicResponseTypenameEnum =
  (typeof UserBasicResponseTypenameEnum)[keyof typeof UserBasicResponseTypenameEnum];

/**
 *
 * @export
 * @interface UserBasicResponseCreator
 */
export interface UserBasicResponseCreator {
  /**
   *
   * @type {number}
   * @memberof UserBasicResponseCreator
   */
  id: number;
  /**
   *
   * @type {string}
   * @memberof UserBasicResponseCreator
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof UserBasicResponseCreator
   */
  email: string;
  /**
   *
   * @type {string}
   * @memberof UserBasicResponseCreator
   */
  google_id: string | null;
  /**
   *
   * @type {number}
   * @memberof UserBasicResponseCreator
   */
  role_id: number;
  /**
   *
   * @type {string}
   * @memberof UserBasicResponseCreator
   */
  avatar_id: string | null;
  /**
   *
   * @type {string}
   * @memberof UserBasicResponseCreator
   */
  created_at: string;
  /**
   *
   * @type {string}
   * @memberof UserBasicResponseCreator
   */
  updated_at: string;
  /**
   *
   * @type {UserBasicResponseCreator}
   * @memberof UserBasicResponseCreator
   */
  creator: UserBasicResponseCreator | null;
  /**
   *
   * @type {UserBasicResponseCreator}
   * @memberof UserBasicResponseCreator
   */
  updater: UserBasicResponseCreator | null;
  /**
   *
   * @type {string}
   * @memberof UserBasicResponseCreator
   */
  __typename?: UserBasicResponseCreatorTypenameEnum;
}

export const UserBasicResponseCreatorTypenameEnum = {
  All: 'all',
  Users: 'users',
  Roles: 'roles',
  StoredFiles: 'stored_files',
  Categories: 'categories',
  Topics: 'topics',
  Courses: 'courses',
  Sections: 'sections',
  Lessons: 'lessons',
  CourseSubscribes: 'course_subscribes',
} as const;

export type UserBasicResponseCreatorTypenameEnum =
  (typeof UserBasicResponseCreatorTypenameEnum)[keyof typeof UserBasicResponseCreatorTypenameEnum];

/**
 *
 * @export
 * @interface UserResponse
 */
export interface UserResponse {
  /**
   *
   * @type {number}
   * @memberof UserResponse
   */
  id: number;
  /**
   *
   * @type {string}
   * @memberof UserResponse
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof UserResponse
   */
  email: string;
  /**
   *
   * @type {string}
   * @memberof UserResponse
   */
  google_id: string | null;
  /**
   *
   * @type {number}
   * @memberof UserResponse
   */
  role_id: number;
  /**
   *
   * @type {string}
   * @memberof UserResponse
   */
  avatar_id: string | null;
  /**
   *
   * @type {string}
   * @memberof UserResponse
   */
  created_at: string;
  /**
   *
   * @type {string}
   * @memberof UserResponse
   */
  updated_at: string;
  /**
   *
   * @type {UserBasicResponseCreator}
   * @memberof UserResponse
   */
  creator: UserBasicResponseCreator | null;
  /**
   *
   * @type {UserBasicResponseCreator}
   * @memberof UserResponse
   */
  updater: UserBasicResponseCreator | null;
  /**
   *
   * @type {string}
   * @memberof UserResponse
   */
  __typename?: UserResponseTypenameEnum;
  /**
   *
   * @type {StoredFileResponse}
   * @memberof UserResponse
   */
  avatar: StoredFileResponse;
  /**
   *
   * @type {RoleResponse}
   * @memberof UserResponse
   */
  role: RoleResponse;
}

export const UserResponseTypenameEnum = {
  All: 'all',
  Users: 'users',
  Roles: 'roles',
  StoredFiles: 'stored_files',
  Categories: 'categories',
  Topics: 'topics',
  Courses: 'courses',
  Sections: 'sections',
  Lessons: 'lessons',
  CourseSubscribes: 'course_subscribes',
} as const;

export type UserResponseTypenameEnum =
  (typeof UserResponseTypenameEnum)[keyof typeof UserResponseTypenameEnum];

/**
 *
 * @export
 * @interface ValidationExceptionErrorResponse
 */
export interface ValidationExceptionErrorResponse {
  /**
   *
   * @type {string}
   * @memberof ValidationExceptionErrorResponse
   */
  type: string;
  /**
   *
   * @type {string}
   * @memberof ValidationExceptionErrorResponse
   */
  message: string;
}
/**
 *
 * @export
 * @interface ValidationExceptionResponse
 */
export interface ValidationExceptionResponse {
  /**
   *
   * @type {string}
   * @memberof ValidationExceptionResponse
   */
  name: string;
  /**
   *
   * @type {Array<ValidationExceptionErrorResponse>}
   * @memberof ValidationExceptionResponse
   */
  errors: Array<ValidationExceptionErrorResponse>;
}

/**
 * AppApi - axios parameter creator
 * @export
 */
export const AppApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getData: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/api`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * AppApi - functional programming interface
 * @export
 */
export const AppApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = AppApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getData(
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getData(
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * AppApi - factory interface
 * @export
 */
export const AppApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = AppApiFp(configuration);
  return {
    /**
     *
     * @summary
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getData(options?: any): AxiosPromise<void> {
      return localVarFp
        .getData(options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * AppApi - object-oriented interface
 * @export
 * @class AppApi
 * @extends {BaseAPI}
 */
export class AppApi extends BaseAPI {
  /**
   *
   * @summary
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AppApi
   */
  public getData(options?: AxiosRequestConfig) {
    return AppApiFp(this.configuration)
      .getData(options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    me: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/auth/me`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async me(
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<AuthMe200Response>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.me(options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = AuthApiFp(configuration);
  return {
    /**
     *
     * @summary
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    me(options?: any): AxiosPromise<AuthMe200Response> {
      return localVarFp.me(options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
  /**
   *
   * @summary
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthApi
   */
  public me(options?: AxiosRequestConfig) {
    return AuthApiFp(this.configuration)
      .me(options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * AuthGoogleApi - axios parameter creator
 * @export
 */
export const AuthGoogleApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary
     * @param {GoogleLoginDto} googleLoginDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    login: async (
      googleLoginDto: GoogleLoginDto,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'googleLoginDto' is not null or undefined
      assertParamExists('login', 'googleLoginDto', googleLoginDto);
      const localVarPath = `/api/auth/google`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        googleLoginDto,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * AuthGoogleApi - functional programming interface
 * @export
 */
export const AuthGoogleApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    AuthGoogleApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary
     * @param {GoogleLoginDto} googleLoginDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async login(
      googleLoginDto: GoogleLoginDto,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<GoogleLogin200Response>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.login(
        googleLoginDto,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * AuthGoogleApi - factory interface
 * @export
 */
export const AuthGoogleApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = AuthGoogleApiFp(configuration);
  return {
    /**
     *
     * @summary
     * @param {GoogleLoginDto} googleLoginDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    login(
      googleLoginDto: GoogleLoginDto,
      options?: any
    ): AxiosPromise<GoogleLogin200Response> {
      return localVarFp
        .login(googleLoginDto, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * Request parameters for login operation in AuthGoogleApi.
 * @export
 * @interface AuthGoogleApiLoginRequest
 */
export interface AuthGoogleApiLoginRequest {
  /**
   *
   * @type {GoogleLoginDto}
   * @memberof AuthGoogleApiLogin
   */
  readonly googleLoginDto: GoogleLoginDto;
}

/**
 * AuthGoogleApi - object-oriented interface
 * @export
 * @class AuthGoogleApi
 * @extends {BaseAPI}
 */
export class AuthGoogleApi extends BaseAPI {
  /**
   *
   * @summary
   * @param {AuthGoogleApiLoginRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthGoogleApi
   */
  public login(
    requestParameters: AuthGoogleApiLoginRequest,
    options?: AxiosRequestConfig
  ) {
    return AuthGoogleApiFp(this.configuration)
      .login(requestParameters.googleLoginDto, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * CategoriesApi - axios parameter creator
 * @export
 */
export const CategoriesApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    list: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/categories`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * CategoriesApi - functional programming interface
 * @export
 */
export const CategoriesApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    CategoriesApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async list(
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<CategoryList200Response>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.list(options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * CategoriesApi - factory interface
 * @export
 */
export const CategoriesApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = CategoriesApiFp(configuration);
  return {
    /**
     *
     * @summary
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    list(options?: any): AxiosPromise<CategoryList200Response> {
      return localVarFp
        .list(options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * CategoriesApi - object-oriented interface
 * @export
 * @class CategoriesApi
 * @extends {BaseAPI}
 */
export class CategoriesApi extends BaseAPI {
  /**
   *
   * @summary
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CategoriesApi
   */
  public list(options?: AxiosRequestConfig) {
    return CategoriesApiFp(this.configuration)
      .list(options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * CoursesApi - axios parameter creator
 * @export
 */
export const CoursesApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    _delete: async (
      id: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('_delete', 'id', id);
      const localVarPath = `/api/courses/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary
     * @param {string} name
     * @param {string} description
     * @param {File} cover
     * @param {Array<number>} topicIds
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    create: async (
      name: string,
      description: string,
      cover: File,
      topicIds: Array<number>,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'name' is not null or undefined
      assertParamExists('create', 'name', name);
      // verify required parameter 'description' is not null or undefined
      assertParamExists('create', 'description', description);
      // verify required parameter 'cover' is not null or undefined
      assertParamExists('create', 'cover', cover);
      // verify required parameter 'topicIds' is not null or undefined
      assertParamExists('create', 'topicIds', topicIds);
      const localVarPath = `/api/courses`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;
      const localVarFormParams = new ((configuration &&
        configuration.formDataCtor) ||
        FormData)();

      if (name !== undefined) {
        localVarFormParams.append('name', name as any);
      }

      if (description !== undefined) {
        localVarFormParams.append('description', description as any);
      }

      if (cover !== undefined) {
        localVarFormParams.append('cover', cover as any);
      }
      if (topicIds) {
        localVarFormParams.append(
          'topicIds[]',
          topicIds.join(COLLECTION_FORMATS.csv)
        );
      }

      localVarHeaderParameter['Content-Type'] = 'multipart/form-data';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = localVarFormParams;

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary
     * @param {string} slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findOne: async (
      slug: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'slug' is not null or undefined
      assertParamExists('findOne', 'slug', slug);
      const localVarPath = `/api/courses/{slug}`.replace(
        `{${'slug'}}`,
        encodeURIComponent(String(slug))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    list: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/courses`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary
     * @param {number} id
     * @param {string} name
     * @param {string} description
     * @param {Array<number>} topicIds
     * @param {File} [cover]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    update: async (
      id: number,
      name: string,
      description: string,
      topicIds: Array<number>,
      cover?: File,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('update', 'id', id);
      // verify required parameter 'name' is not null or undefined
      assertParamExists('update', 'name', name);
      // verify required parameter 'description' is not null or undefined
      assertParamExists('update', 'description', description);
      // verify required parameter 'topicIds' is not null or undefined
      assertParamExists('update', 'topicIds', topicIds);
      const localVarPath = `/api/courses/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;
      const localVarFormParams = new ((configuration &&
        configuration.formDataCtor) ||
        FormData)();

      if (name !== undefined) {
        localVarFormParams.append('name', name as any);
      }

      if (description !== undefined) {
        localVarFormParams.append('description', description as any);
      }

      if (cover !== undefined) {
        localVarFormParams.append('cover', cover as any);
      }
      if (topicIds) {
        localVarFormParams.append(
          'topicIds[]',
          topicIds.join(COLLECTION_FORMATS.csv)
        );
      }

      localVarHeaderParameter['Content-Type'] = 'multipart/form-data';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = localVarFormParams;

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * CoursesApi - functional programming interface
 * @export
 */
export const CoursesApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = CoursesApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async _delete(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<CourseDelete200Response>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator._delete(
        id,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary
     * @param {string} name
     * @param {string} description
     * @param {File} cover
     * @param {Array<number>} topicIds
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async create(
      name: string,
      description: string,
      cover: File,
      topicIds: Array<number>,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<CourseCreate200Response>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.create(
        name,
        description,
        cover,
        topicIds,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary
     * @param {string} slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async findOne(
      slug: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<CourseFindOne200Response>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.findOne(
        slug,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async list(
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<CourseList200Response>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.list(options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary
     * @param {number} id
     * @param {string} name
     * @param {string} description
     * @param {Array<number>} topicIds
     * @param {File} [cover]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async update(
      id: number,
      name: string,
      description: string,
      topicIds: Array<number>,
      cover?: File,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<CourseCreate200Response>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.update(
        id,
        name,
        description,
        topicIds,
        cover,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * CoursesApi - factory interface
 * @export
 */
export const CoursesApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = CoursesApiFp(configuration);
  return {
    /**
     *
     * @summary
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    _delete(id: number, options?: any): AxiosPromise<CourseDelete200Response> {
      return localVarFp
        ._delete(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary
     * @param {string} name
     * @param {string} description
     * @param {File} cover
     * @param {Array<number>} topicIds
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    create(
      name: string,
      description: string,
      cover: File,
      topicIds: Array<number>,
      options?: any
    ): AxiosPromise<CourseCreate200Response> {
      return localVarFp
        .create(name, description, cover, topicIds, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary
     * @param {string} slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findOne(
      slug: string,
      options?: any
    ): AxiosPromise<CourseFindOne200Response> {
      return localVarFp
        .findOne(slug, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    list(options?: any): AxiosPromise<CourseList200Response> {
      return localVarFp
        .list(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary
     * @param {number} id
     * @param {string} name
     * @param {string} description
     * @param {Array<number>} topicIds
     * @param {File} [cover]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    update(
      id: number,
      name: string,
      description: string,
      topicIds: Array<number>,
      cover?: File,
      options?: any
    ): AxiosPromise<CourseCreate200Response> {
      return localVarFp
        .update(id, name, description, topicIds, cover, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * Request parameters for _delete operation in CoursesApi.
 * @export
 * @interface CoursesApiDeleteRequest
 */
export interface CoursesApiDeleteRequest {
  /**
   *
   * @type {number}
   * @memberof CoursesApiDelete
   */
  readonly id: number;
}

/**
 * Request parameters for create operation in CoursesApi.
 * @export
 * @interface CoursesApiCreateRequest
 */
export interface CoursesApiCreateRequest {
  /**
   *
   * @type {string}
   * @memberof CoursesApiCreate
   */
  readonly name: string;

  /**
   *
   * @type {string}
   * @memberof CoursesApiCreate
   */
  readonly description: string;

  /**
   *
   * @type {File}
   * @memberof CoursesApiCreate
   */
  readonly cover: File;

  /**
   *
   * @type {Array<number>}
   * @memberof CoursesApiCreate
   */
  readonly topicIds: Array<number>;
}

/**
 * Request parameters for findOne operation in CoursesApi.
 * @export
 * @interface CoursesApiFindOneRequest
 */
export interface CoursesApiFindOneRequest {
  /**
   *
   * @type {string}
   * @memberof CoursesApiFindOne
   */
  readonly slug: string;
}

/**
 * Request parameters for update operation in CoursesApi.
 * @export
 * @interface CoursesApiUpdateRequest
 */
export interface CoursesApiUpdateRequest {
  /**
   *
   * @type {number}
   * @memberof CoursesApiUpdate
   */
  readonly id: number;

  /**
   *
   * @type {string}
   * @memberof CoursesApiUpdate
   */
  readonly name: string;

  /**
   *
   * @type {string}
   * @memberof CoursesApiUpdate
   */
  readonly description: string;

  /**
   *
   * @type {Array<number>}
   * @memberof CoursesApiUpdate
   */
  readonly topicIds: Array<number>;

  /**
   *
   * @type {File}
   * @memberof CoursesApiUpdate
   */
  readonly cover?: File;
}

/**
 * CoursesApi - object-oriented interface
 * @export
 * @class CoursesApi
 * @extends {BaseAPI}
 */
export class CoursesApi extends BaseAPI {
  /**
   *
   * @summary
   * @param {CoursesApiDeleteRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CoursesApi
   */
  public _delete(
    requestParameters: CoursesApiDeleteRequest,
    options?: AxiosRequestConfig
  ) {
    return CoursesApiFp(this.configuration)
      ._delete(requestParameters.id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary
   * @param {CoursesApiCreateRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CoursesApi
   */
  public create(
    requestParameters: CoursesApiCreateRequest,
    options?: AxiosRequestConfig
  ) {
    return CoursesApiFp(this.configuration)
      .create(
        requestParameters.name,
        requestParameters.description,
        requestParameters.cover,
        requestParameters.topicIds,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary
   * @param {CoursesApiFindOneRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CoursesApi
   */
  public findOne(
    requestParameters: CoursesApiFindOneRequest,
    options?: AxiosRequestConfig
  ) {
    return CoursesApiFp(this.configuration)
      .findOne(requestParameters.slug, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CoursesApi
   */
  public list(options?: AxiosRequestConfig) {
    return CoursesApiFp(this.configuration)
      .list(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary
   * @param {CoursesApiUpdateRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CoursesApi
   */
  public update(
    requestParameters: CoursesApiUpdateRequest,
    options?: AxiosRequestConfig
  ) {
    return CoursesApiFp(this.configuration)
      .update(
        requestParameters.id,
        requestParameters.name,
        requestParameters.description,
        requestParameters.topicIds,
        requestParameters.cover,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * LessonsApi - axios parameter creator
 * @export
 */
export const LessonsApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary
     * @param {CreateLessonDto} createLessonDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    create: async (
      createLessonDto: CreateLessonDto,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'createLessonDto' is not null or undefined
      assertParamExists('create', 'createLessonDto', createLessonDto);
      const localVarPath = `/api/lesson`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createLessonDto,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * LessonsApi - functional programming interface
 * @export
 */
export const LessonsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = LessonsApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary
     * @param {CreateLessonDto} createLessonDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async create(
      createLessonDto: CreateLessonDto,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.create(
        createLessonDto,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * LessonsApi - factory interface
 * @export
 */
export const LessonsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = LessonsApiFp(configuration);
  return {
    /**
     *
     * @summary
     * @param {CreateLessonDto} createLessonDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    create(
      createLessonDto: CreateLessonDto,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .create(createLessonDto, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * Request parameters for create operation in LessonsApi.
 * @export
 * @interface LessonsApiCreateRequest
 */
export interface LessonsApiCreateRequest {
  /**
   *
   * @type {CreateLessonDto}
   * @memberof LessonsApiCreate
   */
  readonly createLessonDto: CreateLessonDto;
}

/**
 * LessonsApi - object-oriented interface
 * @export
 * @class LessonsApi
 * @extends {BaseAPI}
 */
export class LessonsApi extends BaseAPI {
  /**
   *
   * @summary
   * @param {LessonsApiCreateRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LessonsApi
   */
  public create(
    requestParameters: LessonsApiCreateRequest,
    options?: AxiosRequestConfig
  ) {
    return LessonsApiFp(this.configuration)
      .create(requestParameters.createLessonDto, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * SectionsApi - axios parameter creator
 * @export
 */
export const SectionsApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary
     * @param {CreateSectionDto} createSectionDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    create: async (
      createSectionDto: CreateSectionDto,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'createSectionDto' is not null or undefined
      assertParamExists('create', 'createSectionDto', createSectionDto);
      const localVarPath = `/api/sections`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createSectionDto,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * SectionsApi - functional programming interface
 * @export
 */
export const SectionsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = SectionsApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary
     * @param {CreateSectionDto} createSectionDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async create(
      createSectionDto: CreateSectionDto,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<SectionCreate200Response>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.create(
        createSectionDto,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * SectionsApi - factory interface
 * @export
 */
export const SectionsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = SectionsApiFp(configuration);
  return {
    /**
     *
     * @summary
     * @param {CreateSectionDto} createSectionDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    create(
      createSectionDto: CreateSectionDto,
      options?: any
    ): AxiosPromise<SectionCreate200Response> {
      return localVarFp
        .create(createSectionDto, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * Request parameters for create operation in SectionsApi.
 * @export
 * @interface SectionsApiCreateRequest
 */
export interface SectionsApiCreateRequest {
  /**
   *
   * @type {CreateSectionDto}
   * @memberof SectionsApiCreate
   */
  readonly createSectionDto: CreateSectionDto;
}

/**
 * SectionsApi - object-oriented interface
 * @export
 * @class SectionsApi
 * @extends {BaseAPI}
 */
export class SectionsApi extends BaseAPI {
  /**
   *
   * @summary
   * @param {SectionsApiCreateRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SectionsApi
   */
  public create(
    requestParameters: SectionsApiCreateRequest,
    options?: AxiosRequestConfig
  ) {
    return SectionsApiFp(this.configuration)
      .create(requestParameters.createSectionDto, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * TopicsApi - axios parameter creator
 * @export
 */
export const TopicsApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary
     * @param {number} [c]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findAll: async (
      c?: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/topics`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (c !== undefined) {
        localVarQueryParameter['c'] = c;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary
     * @param {string} slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findOne: async (
      slug: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'slug' is not null or undefined
      assertParamExists('findOne', 'slug', slug);
      const localVarPath = `/api/topics/{slug}`.replace(
        `{${'slug'}}`,
        encodeURIComponent(String(slug))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * TopicsApi - functional programming interface
 * @export
 */
export const TopicsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = TopicsApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary
     * @param {number} [c]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async findAll(
      c?: number,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<TopicFindAll200Response>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.findAll(
        c,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary
     * @param {string} slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async findOne(
      slug: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<TopicFindOne200Response>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.findOne(
        slug,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * TopicsApi - factory interface
 * @export
 */
export const TopicsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = TopicsApiFp(configuration);
  return {
    /**
     *
     * @summary
     * @param {number} [c]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findAll(c?: number, options?: any): AxiosPromise<TopicFindAll200Response> {
      return localVarFp
        .findAll(c, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary
     * @param {string} slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findOne(
      slug: string,
      options?: any
    ): AxiosPromise<TopicFindOne200Response> {
      return localVarFp
        .findOne(slug, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * Request parameters for findAll operation in TopicsApi.
 * @export
 * @interface TopicsApiFindAllRequest
 */
export interface TopicsApiFindAllRequest {
  /**
   *
   * @type {number}
   * @memberof TopicsApiFindAll
   */
  readonly c?: number;
}

/**
 * Request parameters for findOne operation in TopicsApi.
 * @export
 * @interface TopicsApiFindOneRequest
 */
export interface TopicsApiFindOneRequest {
  /**
   *
   * @type {string}
   * @memberof TopicsApiFindOne
   */
  readonly slug: string;
}

/**
 * TopicsApi - object-oriented interface
 * @export
 * @class TopicsApi
 * @extends {BaseAPI}
 */
export class TopicsApi extends BaseAPI {
  /**
   *
   * @summary
   * @param {TopicsApiFindAllRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TopicsApi
   */
  public findAll(
    requestParameters: TopicsApiFindAllRequest = {},
    options?: AxiosRequestConfig
  ) {
    return TopicsApiFp(this.configuration)
      .findAll(requestParameters.c, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary
   * @param {TopicsApiFindOneRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TopicsApi
   */
  public findOne(
    requestParameters: TopicsApiFindOneRequest,
    options?: AxiosRequestConfig
  ) {
    return TopicsApiFp(this.configuration)
      .findOne(requestParameters.slug, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
